/*
    Copyright (c) 2014 Wolfgang Imig
    
    This file is part of the library "Java Add-in for Microsoft Office".

    This file must be used according to the terms of   
      
      MIT License, http://opensource.org/licenses/MIT

*/
package com.wilutions.com.gen;

import java.io.PrintWriter;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import javax.tools.JavaFileObject;

import com.wilutions.com.ComModule;
import com.wilutions.com.DispatchImpl;
import com.wilutions.joa.DeclAddin;
import com.wilutions.joa.OfficeAddin;
import com.wilutions.joa.outlook.OutlookFormRegion;

@SupportedAnnotationTypes({ "com.wilutions.com.CoClass" })
@SupportedSourceVersion(SourceVersion.RELEASE_7)
public class ProcessCoClass extends AbstractProcessor {

	//private static Log log = LogFactory.getLog(ProcessCoClass.class);
	private ProcessingEnvironment processingEnv;

	public ProcessCoClass() {
	}

	@Override
	public synchronized void init(ProcessingEnvironment processingEnv) {
		super.init(processingEnv);
		this.processingEnv = processingEnv;
	}
	
	@Override
	public boolean process(Set<? extends TypeElement> annotations,
			RoundEnvironment roundEnv) {


		try {
			JavaFileObject sourceFile = processingEnv.getFiler()
					.createSourceFile(ComModule.MODULE_CLASSNAME,
							new Element[0]);
			//log.info("sourceFile=" + sourceFile.toUri());
			
			String modulePackage = ComModule.MODULE_CLASSNAME;
			int p = modulePackage.lastIndexOf('.');
			modulePackage = modulePackage.substring(0, p >= 0 ? p : 0);

			PrintWriter sourceWriter = new PrintWriter(sourceFile.openWriter());
			sourceWriter.println("package " + modulePackage + ";");
			sourceWriter.println();
			sourceWriter.println("// This code was generated by joa-processor - do not modify");
			sourceWriter.println("import com.wilutions.com.*;");
			sourceWriter.println("import com.wilutions.joa.*;");
			sourceWriter.println("import com.wilutions.joa.outlook.*;");
			
			sourceWriter.println("@SuppressWarnings(\"all\")");
			sourceWriter.println("public class Module extends ComModule {");
			
			sourceWriter.println();
			generateCoClasses(sourceWriter, roundEnv);
			generateAddins(sourceWriter, roundEnv);
			generateFormRegions(sourceWriter, roundEnv);
			
			sourceWriter.println();

			printSingleton(sourceWriter);
			
			sourceWriter.println("}");
			sourceWriter.close();

		} catch (Throwable e) {
			//log.error("exception", e);
		}
		return true;
	}

	private void printSingleton(PrintWriter sourceWriter) {
		sourceWriter.println("  private Module() {}");
		sourceWriter.println("  private static Module module = new Module();");
		sourceWriter.println("  public static Module getInstance() { return module; }");
	}

	private void generateCoClasses(PrintWriter sourceWriter,
			RoundEnvironment roundEnv) {

		try {

			//sourceWriter.println("// getTypeElement(Dispatch)=" + processingEnv.getElementUtils().getTypeElement(DispatchImpl.class.getName()));
			
			TypeMirror tmDispImpl = processingEnv.getElementUtils().getTypeElement(DispatchImpl.class.getName()).asType();
			//sourceWriter.println("// get TypeMirror for DispatchImpl=" + tmDispImpl);

			sourceWriter.println("  // COM classes to be registered ");
			sourceWriter.println("  private final Class<?>[] coclasses = {");

			for (Element elem : roundEnv.getElementsAnnotatedWith(com.wilutions.com.CoClass.class)) {
				
//				com.wilutions.com.CoClass annotation = elem.getAnnotation(com.wilutions.com.CoClass.class);
//				sourceWriter.println("// found annotation=" + annotation + ", elem=" + elem);

				TypeMirror tmElem = elem.asType();
				//sourceWriter.println("// TypeMirror elem=" + tmElem);
				
				boolean succ = processingEnv.getTypeUtils().isAssignable(tmElem, tmDispImpl);
				//sourceWriter.println("// is assignable=" + succ);

				String className = elem.toString();
				if (succ) {
					sourceWriter.print("    ");
					sourceWriter.print(className);
					sourceWriter.println(".class,");
				} else {
					sourceWriter.print("    /** ERROR **/ ");
					sourceWriter.print(className + " must extend "
							+ DispatchImpl.class);
					sourceWriter.println();
				}
			}

			sourceWriter.println("  };");
			sourceWriter.println("  public Class<?>[] getCoClasses() { return coclasses; }");

		} catch (Throwable e) {
			sourceWriter.println("/***ERROR**");
			e.printStackTrace(sourceWriter);
			sourceWriter.println("*/");
		}

		sourceWriter.println();
	}

	private void generateFormRegions(PrintWriter sourceWriter,
			RoundEnvironment roundEnv) {

		//sourceWriter.println("// getTypeElement(Dispatch)=" + processingEnv.getElementUtils().getTypeElement(OutlookFormRegion.class.getName()));
		
		TypeMirror tmOutlookFormRegion = processingEnv.getElementUtils().getTypeElement(OutlookFormRegion.class.getName()).asType();
		//sourceWriter.println("// get TypeMirror for OutlookFormRegion=" + tmOutlookFormRegion);

		sourceWriter.println("  // OutlookFormRegion classes to be registered ");
		
		sourceWriter.println("  private final Class<?>[] formRegions = {");

		for (Element elem : roundEnv.getElementsAnnotatedWith(com.wilutions.joa.outlook.DeclFormRegion.class)) {
			
//			com.wilutions.joa.outlook.DeclFormRegion annotation = elem.getAnnotation(com.wilutions.joa.outlook.DeclFormRegion.class);
//			sourceWriter.println("// found annotation=" + annotation + ", elem=" + elem);

			TypeMirror tmElem = elem.asType();
			//sourceWriter.println("// TypeMirror elem=" + tmElem);

			boolean succ = processingEnv.getTypeUtils().isAssignable(tmElem, tmOutlookFormRegion);
			//sourceWriter.println("// is assignable=" + succ);
			
			String className = elem.toString();
			if (succ) {
				sourceWriter.print("    ");
				sourceWriter.print(className);
				sourceWriter.println(".class,");
			} else {
				sourceWriter.print("    /** ERROR **/ ");
				sourceWriter.print(className + " must extend "
						+ OutlookFormRegion.class);
				sourceWriter.println();
			}
		}

		sourceWriter.println("  };");
		sourceWriter.println("  public Class<?>[] getFormRegions() { return formRegions; }");

		sourceWriter.println();
	}

	private void generateAddins(PrintWriter sourceWriter,
			RoundEnvironment roundEnv) {

		//sourceWriter.println("// getTypeElement(Dispatch)=" + processingEnv.getElementUtils().getTypeElement(OutlookFormRegion.class.getName()));
		
		TypeMirror tmOfficeAddin = processingEnv.getElementUtils().getTypeElement(OfficeAddin.class.getName()).asType();
		//sourceWriter.println("// get TypeMirror for OutlookFormRegion=" + tmOutlookFormRegion);

		sourceWriter.println("  // OfficeAddin classes to be registered ");
		
		sourceWriter.println("  private final Class<?>[] addins = {");
		
		for (Element elem : roundEnv.getElementsAnnotatedWith(DeclAddin.class)) {
			
//			com.wilutions.joa.outlook.DeclFormRegion annotation = elem.getAnnotation(com.wilutions.joa.outlook.DeclFormRegion.class);
//			sourceWriter.println("// found annotation=" + annotation + ", elem=" + elem);
			
			TypeMirror tmElem = elem.asType();
			//sourceWriter.println("// TypeMirror elem=" + tmElem);

			boolean succ = processingEnv.getTypeUtils().isAssignable(tmElem, tmOfficeAddin);
			//sourceWriter.println("// is assignable=" + succ);
			
			String className = elem.toString();
			if (succ) {
				sourceWriter.print("    ");
				sourceWriter.print(className);
				sourceWriter.println(".class,");
			} else {
				sourceWriter.print("    /** ERROR **/ ");
				sourceWriter.print(className + " must extend "
						+ OutlookFormRegion.class);
				sourceWriter.println();
			}
		}

		sourceWriter.println("  };");
		sourceWriter.println("  public Class<?>[] getAddins() { return addins; }");

		sourceWriter.println();
	}
	
}
