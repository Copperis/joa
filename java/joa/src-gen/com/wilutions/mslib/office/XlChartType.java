/* ** GENEREATED FILE - DO NOT MODIFY ** */
package com.wilutions.mslib.office;
import com.wilutions.com.*;

/**
 * XlChartType.
 * 
 */
@SuppressWarnings("all")
@CoInterface(guid="{00000000-0000-0000-0000-000000000000}")
public class XlChartType implements ComEnum {
  static boolean __typelib__loaded = __TypeLib.load();

  // Typed constants
  public final static XlChartType xlColumnClustered = new XlChartType(51);
  public final static XlChartType xlColumnStacked = new XlChartType(52);
  public final static XlChartType xlColumnStacked100 = new XlChartType(53);
  public final static XlChartType xl3DColumnClustered = new XlChartType(54);
  public final static XlChartType xl3DColumnStacked = new XlChartType(55);
  public final static XlChartType xl3DColumnStacked100 = new XlChartType(56);
  public final static XlChartType xlBarClustered = new XlChartType(57);
  public final static XlChartType xlBarStacked = new XlChartType(58);
  public final static XlChartType xlBarStacked100 = new XlChartType(59);
  public final static XlChartType xl3DBarClustered = new XlChartType(60);
  public final static XlChartType xl3DBarStacked = new XlChartType(61);
  public final static XlChartType xl3DBarStacked100 = new XlChartType(62);
  public final static XlChartType xlLineStacked = new XlChartType(63);
  public final static XlChartType xlLineStacked100 = new XlChartType(64);
  public final static XlChartType xlLineMarkers = new XlChartType(65);
  public final static XlChartType xlLineMarkersStacked = new XlChartType(66);
  public final static XlChartType xlLineMarkersStacked100 = new XlChartType(67);
  public final static XlChartType xlPieOfPie = new XlChartType(68);
  public final static XlChartType xlPieExploded = new XlChartType(69);
  public final static XlChartType xl3DPieExploded = new XlChartType(70);
  public final static XlChartType xlBarOfPie = new XlChartType(71);
  public final static XlChartType xlXYScatterSmooth = new XlChartType(72);
  public final static XlChartType xlXYScatterSmoothNoMarkers = new XlChartType(73);
  public final static XlChartType xlXYScatterLines = new XlChartType(74);
  public final static XlChartType xlXYScatterLinesNoMarkers = new XlChartType(75);
  public final static XlChartType xlAreaStacked = new XlChartType(76);
  public final static XlChartType xlAreaStacked100 = new XlChartType(77);
  public final static XlChartType xl3DAreaStacked = new XlChartType(78);
  public final static XlChartType xl3DAreaStacked100 = new XlChartType(79);
  public final static XlChartType xlDoughnutExploded = new XlChartType(80);
  public final static XlChartType xlRadarMarkers = new XlChartType(81);
  public final static XlChartType xlRadarFilled = new XlChartType(82);
  public final static XlChartType xlSurface = new XlChartType(83);
  public final static XlChartType xlSurfaceWireframe = new XlChartType(84);
  public final static XlChartType xlSurfaceTopView = new XlChartType(85);
  public final static XlChartType xlSurfaceTopViewWireframe = new XlChartType(86);
  public final static XlChartType xlBubble = new XlChartType(15);
  public final static XlChartType xlBubble3DEffect = new XlChartType(87);
  public final static XlChartType xlStockHLC = new XlChartType(88);
  public final static XlChartType xlStockOHLC = new XlChartType(89);
  public final static XlChartType xlStockVHLC = new XlChartType(90);
  public final static XlChartType xlStockVOHLC = new XlChartType(91);
  public final static XlChartType xlCylinderColClustered = new XlChartType(92);
  public final static XlChartType xlCylinderColStacked = new XlChartType(93);
  public final static XlChartType xlCylinderColStacked100 = new XlChartType(94);
  public final static XlChartType xlCylinderBarClustered = new XlChartType(95);
  public final static XlChartType xlCylinderBarStacked = new XlChartType(96);
  public final static XlChartType xlCylinderBarStacked100 = new XlChartType(97);
  public final static XlChartType xlCylinderCol = new XlChartType(98);
  public final static XlChartType xlConeColClustered = new XlChartType(99);
  public final static XlChartType xlConeColStacked = new XlChartType(100);
  public final static XlChartType xlConeColStacked100 = new XlChartType(101);
  public final static XlChartType xlConeBarClustered = new XlChartType(102);
  public final static XlChartType xlConeBarStacked = new XlChartType(103);
  public final static XlChartType xlConeBarStacked100 = new XlChartType(104);
  public final static XlChartType xlConeCol = new XlChartType(105);
  public final static XlChartType xlPyramidColClustered = new XlChartType(106);
  public final static XlChartType xlPyramidColStacked = new XlChartType(107);
  public final static XlChartType xlPyramidColStacked100 = new XlChartType(108);
  public final static XlChartType xlPyramidBarClustered = new XlChartType(109);
  public final static XlChartType xlPyramidBarStacked = new XlChartType(110);
  public final static XlChartType xlPyramidBarStacked100 = new XlChartType(111);
  public final static XlChartType xlPyramidCol = new XlChartType(112);
  public final static XlChartType xl3DColumn = new XlChartType(-4100);
  public final static XlChartType xlLine = new XlChartType(4);
  public final static XlChartType xl3DLine = new XlChartType(-4101);
  public final static XlChartType xl3DPie = new XlChartType(-4102);
  public final static XlChartType xlPie = new XlChartType(5);
  public final static XlChartType xlXYScatter = new XlChartType(-4169);
  public final static XlChartType xl3DArea = new XlChartType(-4098);
  public final static XlChartType xlArea = new XlChartType(1);
  public final static XlChartType xlDoughnut = new XlChartType(-4120);
  public final static XlChartType xlRadar = new XlChartType(-4151);
  public final static XlChartType xlCombo = new XlChartType(-4152);
  public final static XlChartType xlComboColumnClusteredLine = new XlChartType(113);
  public final static XlChartType xlComboColumnClusteredLineSecondaryAxis = new XlChartType(114);
  public final static XlChartType xlComboAreaStackedColumnClustered = new XlChartType(115);
  public final static XlChartType xlOtherCombinations = new XlChartType(116);
  public final static XlChartType xlSuggestedChart = new XlChartType(-2);

  // Integer constants for bitsets and switch statements
  public final static int _xlColumnClustered = 51;
  public final static int _xlColumnStacked = 52;
  public final static int _xlColumnStacked100 = 53;
  public final static int _xl3DColumnClustered = 54;
  public final static int _xl3DColumnStacked = 55;
  public final static int _xl3DColumnStacked100 = 56;
  public final static int _xlBarClustered = 57;
  public final static int _xlBarStacked = 58;
  public final static int _xlBarStacked100 = 59;
  public final static int _xl3DBarClustered = 60;
  public final static int _xl3DBarStacked = 61;
  public final static int _xl3DBarStacked100 = 62;
  public final static int _xlLineStacked = 63;
  public final static int _xlLineStacked100 = 64;
  public final static int _xlLineMarkers = 65;
  public final static int _xlLineMarkersStacked = 66;
  public final static int _xlLineMarkersStacked100 = 67;
  public final static int _xlPieOfPie = 68;
  public final static int _xlPieExploded = 69;
  public final static int _xl3DPieExploded = 70;
  public final static int _xlBarOfPie = 71;
  public final static int _xlXYScatterSmooth = 72;
  public final static int _xlXYScatterSmoothNoMarkers = 73;
  public final static int _xlXYScatterLines = 74;
  public final static int _xlXYScatterLinesNoMarkers = 75;
  public final static int _xlAreaStacked = 76;
  public final static int _xlAreaStacked100 = 77;
  public final static int _xl3DAreaStacked = 78;
  public final static int _xl3DAreaStacked100 = 79;
  public final static int _xlDoughnutExploded = 80;
  public final static int _xlRadarMarkers = 81;
  public final static int _xlRadarFilled = 82;
  public final static int _xlSurface = 83;
  public final static int _xlSurfaceWireframe = 84;
  public final static int _xlSurfaceTopView = 85;
  public final static int _xlSurfaceTopViewWireframe = 86;
  public final static int _xlBubble = 15;
  public final static int _xlBubble3DEffect = 87;
  public final static int _xlStockHLC = 88;
  public final static int _xlStockOHLC = 89;
  public final static int _xlStockVHLC = 90;
  public final static int _xlStockVOHLC = 91;
  public final static int _xlCylinderColClustered = 92;
  public final static int _xlCylinderColStacked = 93;
  public final static int _xlCylinderColStacked100 = 94;
  public final static int _xlCylinderBarClustered = 95;
  public final static int _xlCylinderBarStacked = 96;
  public final static int _xlCylinderBarStacked100 = 97;
  public final static int _xlCylinderCol = 98;
  public final static int _xlConeColClustered = 99;
  public final static int _xlConeColStacked = 100;
  public final static int _xlConeColStacked100 = 101;
  public final static int _xlConeBarClustered = 102;
  public final static int _xlConeBarStacked = 103;
  public final static int _xlConeBarStacked100 = 104;
  public final static int _xlConeCol = 105;
  public final static int _xlPyramidColClustered = 106;
  public final static int _xlPyramidColStacked = 107;
  public final static int _xlPyramidColStacked100 = 108;
  public final static int _xlPyramidBarClustered = 109;
  public final static int _xlPyramidBarStacked = 110;
  public final static int _xlPyramidBarStacked100 = 111;
  public final static int _xlPyramidCol = 112;
  public final static int _xl3DColumn = -4100;
  public final static int _xlLine = 4;
  public final static int _xl3DLine = -4101;
  public final static int _xl3DPie = -4102;
  public final static int _xlPie = 5;
  public final static int _xlXYScatter = -4169;
  public final static int _xl3DArea = -4098;
  public final static int _xlArea = 1;
  public final static int _xlDoughnut = -4120;
  public final static int _xlRadar = -4151;
  public final static int _xlCombo = -4152;
  public final static int _xlComboColumnClusteredLine = 113;
  public final static int _xlComboColumnClusteredLineSecondaryAxis = 114;
  public final static int _xlComboAreaStackedColumnClustered = 115;
  public final static int _xlOtherCombinations = 116;
  public final static int _xlSuggestedChart = -2;

  // Value, readonly field.
  public final int value;

  // Private constructor, use valueOf to create an instance.
  private XlChartType(int value) { this.value = value; }

  // Return one of the predefined typed constants for the given value or create a new object.
  public static  XlChartType valueOf(int value) {
    switch(value) {
    case 51: return xlColumnClustered;
    case 52: return xlColumnStacked;
    case 53: return xlColumnStacked100;
    case 54: return xl3DColumnClustered;
    case 55: return xl3DColumnStacked;
    case 56: return xl3DColumnStacked100;
    case 57: return xlBarClustered;
    case 58: return xlBarStacked;
    case 59: return xlBarStacked100;
    case 60: return xl3DBarClustered;
    case 61: return xl3DBarStacked;
    case 62: return xl3DBarStacked100;
    case 63: return xlLineStacked;
    case 64: return xlLineStacked100;
    case 65: return xlLineMarkers;
    case 66: return xlLineMarkersStacked;
    case 67: return xlLineMarkersStacked100;
    case 68: return xlPieOfPie;
    case 69: return xlPieExploded;
    case 70: return xl3DPieExploded;
    case 71: return xlBarOfPie;
    case 72: return xlXYScatterSmooth;
    case 73: return xlXYScatterSmoothNoMarkers;
    case 74: return xlXYScatterLines;
    case 75: return xlXYScatterLinesNoMarkers;
    case 76: return xlAreaStacked;
    case 77: return xlAreaStacked100;
    case 78: return xl3DAreaStacked;
    case 79: return xl3DAreaStacked100;
    case 80: return xlDoughnutExploded;
    case 81: return xlRadarMarkers;
    case 82: return xlRadarFilled;
    case 83: return xlSurface;
    case 84: return xlSurfaceWireframe;
    case 85: return xlSurfaceTopView;
    case 86: return xlSurfaceTopViewWireframe;
    case 15: return xlBubble;
    case 87: return xlBubble3DEffect;
    case 88: return xlStockHLC;
    case 89: return xlStockOHLC;
    case 90: return xlStockVHLC;
    case 91: return xlStockVOHLC;
    case 92: return xlCylinderColClustered;
    case 93: return xlCylinderColStacked;
    case 94: return xlCylinderColStacked100;
    case 95: return xlCylinderBarClustered;
    case 96: return xlCylinderBarStacked;
    case 97: return xlCylinderBarStacked100;
    case 98: return xlCylinderCol;
    case 99: return xlConeColClustered;
    case 100: return xlConeColStacked;
    case 101: return xlConeColStacked100;
    case 102: return xlConeBarClustered;
    case 103: return xlConeBarStacked;
    case 104: return xlConeBarStacked100;
    case 105: return xlConeCol;
    case 106: return xlPyramidColClustered;
    case 107: return xlPyramidColStacked;
    case 108: return xlPyramidColStacked100;
    case 109: return xlPyramidBarClustered;
    case 110: return xlPyramidBarStacked;
    case 111: return xlPyramidBarStacked100;
    case 112: return xlPyramidCol;
    case -4100: return xl3DColumn;
    case 4: return xlLine;
    case -4101: return xl3DLine;
    case -4102: return xl3DPie;
    case 5: return xlPie;
    case -4169: return xlXYScatter;
    case -4098: return xl3DArea;
    case 1: return xlArea;
    case -4120: return xlDoughnut;
    case -4151: return xlRadar;
    case -4152: return xlCombo;
    case 113: return xlComboColumnClusteredLine;
    case 114: return xlComboColumnClusteredLineSecondaryAxis;
    case 115: return xlComboAreaStackedColumnClustered;
    case 116: return xlOtherCombinations;
    case -2: return xlSuggestedChart;
    default: return new XlChartType(value);
    }
  }

  public String toString() {
    switch(value) {
    case 15: return "xlBubble";
    case 59: return "xlBarStacked100";
    case 51: return "xlColumnClustered";
    case 52: return "xlColumnStacked";
    case 53: return "xlColumnStacked100";
    case 54: return "xl3DColumnClustered";
    case 112: return "xlPyramidCol";
    case 55: return "xl3DColumnStacked";
    case 111: return "xlPyramidBarStacked100";
    case 56: return "xl3DColumnStacked100";
    case 110: return "xlPyramidBarStacked";
    case 57: return "xlBarClustered";
    case 58: return "xlBarStacked";
    case 60: return "xl3DBarClustered";
    case 61: return "xl3DBarStacked";
    case 62: return "xl3DBarStacked100";
    case 63: return "xlLineStacked";
    case 109: return "xlPyramidBarClustered";
    case 64: return "xlLineStacked100";
    case 108: return "xlPyramidColStacked100";
    case 65: return "xlLineMarkers";
    case 88: return "xlStockHLC";
    case 66: return "xlLineMarkersStacked";
    case 89: return "xlStockOHLC";
    case 67: return "xlLineMarkersStacked100";
    case 4: return "xlLine";
    case 105: return "xlConeCol";
    case 86: return "xlSurfaceTopViewWireframe";
    case 68: return "xlPieOfPie";
    case 104: return "xlConeBarStacked100";
    case 87: return "xlBubble3DEffect";
    case 69: return "xlPieExploded";
    case 92: return "xlCylinderColClustered";
    case 70: return "xl3DPieExploded";
    case 93: return "xlCylinderColStacked";
    case 71: return "xlBarOfPie";
    case 90: return "xlStockVHLC";
    case 72: return "xlXYScatterSmooth";
    case 91: return "xlStockVOHLC";
    case 73: return "xlXYScatterSmoothNoMarkers";
    case 96: return "xlCylinderBarStacked";
    case 74: return "xlXYScatterLines";
    case 97: return "xlCylinderBarStacked100";
    case 75: return "xlXYScatterLinesNoMarkers";
    case 94: return "xlCylinderColStacked100";
    case 76: return "xlAreaStacked";
    case 95: return "xlCylinderBarClustered";
    case 77: return "xlAreaStacked100";
    case 78: return "xl3DAreaStacked";
    case 79: return "xl3DAreaStacked100";
    case 103: return "xlConeBarStacked";
    case 80: return "xlDoughnutExploded";
    case 102: return "xlConeBarClustered";
    case 81: return "xlRadarMarkers";
    case 101: return "xlConeColStacked100";
    case 82: return "xlRadarFilled";
    case 100: return "xlConeColStacked";
    case 83: return "xlSurface";
    case 107: return "xlPyramidColStacked";
    case 84: return "xlSurfaceWireframe";
    case 106: return "xlPyramidColClustered";
    case 85: return "xlSurfaceTopView";
    case 98: return "xlCylinderCol";
    case 99: return "xlConeColClustered";
    case -4100: return "xl3DColumn";
    case -4101: return "xl3DLine";
    case -4102: return "xl3DPie";
    case 5: return "xlPie";
    case -4169: return "xlXYScatter";
    case -4098: return "xl3DArea";
    case 1: return "xlArea";
    case -4120: return "xlDoughnut";
    case -4151: return "xlRadar";
    case -4152: return "xlCombo";
    case 113: return "xlComboColumnClusteredLine";
    case 114: return "xlComboColumnClusteredLineSecondaryAxis";
    case 115: return "xlComboAreaStackedColumnClustered";
    case 116: return "xlOtherCombinations";
    case -2: return "xlSuggestedChart";
    default: {
      StringBuilder sbuf = new StringBuilder();
      sbuf.append("[").append(value).append("=");
      if ((value & 15) != 0) sbuf.append("|xlBubble");
      if ((value & 59) != 0) sbuf.append("|xlBarStacked100");
      if ((value & 51) != 0) sbuf.append("|xlColumnClustered");
      if ((value & 52) != 0) sbuf.append("|xlColumnStacked");
      if ((value & 53) != 0) sbuf.append("|xlColumnStacked100");
      if ((value & 54) != 0) sbuf.append("|xl3DColumnClustered");
      if ((value & 112) != 0) sbuf.append("|xlPyramidCol");
      if ((value & 55) != 0) sbuf.append("|xl3DColumnStacked");
      if ((value & 111) != 0) sbuf.append("|xlPyramidBarStacked100");
      if ((value & 56) != 0) sbuf.append("|xl3DColumnStacked100");
      if ((value & 110) != 0) sbuf.append("|xlPyramidBarStacked");
      if ((value & 57) != 0) sbuf.append("|xlBarClustered");
      if ((value & 58) != 0) sbuf.append("|xlBarStacked");
      if ((value & 60) != 0) sbuf.append("|xl3DBarClustered");
      if ((value & 61) != 0) sbuf.append("|xl3DBarStacked");
      if ((value & 62) != 0) sbuf.append("|xl3DBarStacked100");
      if ((value & 63) != 0) sbuf.append("|xlLineStacked");
      if ((value & 109) != 0) sbuf.append("|xlPyramidBarClustered");
      if ((value & 64) != 0) sbuf.append("|xlLineStacked100");
      if ((value & 108) != 0) sbuf.append("|xlPyramidColStacked100");
      if ((value & 65) != 0) sbuf.append("|xlLineMarkers");
      if ((value & 88) != 0) sbuf.append("|xlStockHLC");
      if ((value & 66) != 0) sbuf.append("|xlLineMarkersStacked");
      if ((value & 89) != 0) sbuf.append("|xlStockOHLC");
      if ((value & 67) != 0) sbuf.append("|xlLineMarkersStacked100");
      if ((value & 4) != 0) sbuf.append("|xlLine");
      if ((value & 105) != 0) sbuf.append("|xlConeCol");
      if ((value & 86) != 0) sbuf.append("|xlSurfaceTopViewWireframe");
      if ((value & 68) != 0) sbuf.append("|xlPieOfPie");
      if ((value & 104) != 0) sbuf.append("|xlConeBarStacked100");
      if ((value & 87) != 0) sbuf.append("|xlBubble3DEffect");
      if ((value & 69) != 0) sbuf.append("|xlPieExploded");
      if ((value & 92) != 0) sbuf.append("|xlCylinderColClustered");
      if ((value & 70) != 0) sbuf.append("|xl3DPieExploded");
      if ((value & 93) != 0) sbuf.append("|xlCylinderColStacked");
      if ((value & 71) != 0) sbuf.append("|xlBarOfPie");
      if ((value & 90) != 0) sbuf.append("|xlStockVHLC");
      if ((value & 72) != 0) sbuf.append("|xlXYScatterSmooth");
      if ((value & 91) != 0) sbuf.append("|xlStockVOHLC");
      if ((value & 73) != 0) sbuf.append("|xlXYScatterSmoothNoMarkers");
      if ((value & 96) != 0) sbuf.append("|xlCylinderBarStacked");
      if ((value & 74) != 0) sbuf.append("|xlXYScatterLines");
      if ((value & 97) != 0) sbuf.append("|xlCylinderBarStacked100");
      if ((value & 75) != 0) sbuf.append("|xlXYScatterLinesNoMarkers");
      if ((value & 94) != 0) sbuf.append("|xlCylinderColStacked100");
      if ((value & 76) != 0) sbuf.append("|xlAreaStacked");
      if ((value & 95) != 0) sbuf.append("|xlCylinderBarClustered");
      if ((value & 77) != 0) sbuf.append("|xlAreaStacked100");
      if ((value & 78) != 0) sbuf.append("|xl3DAreaStacked");
      if ((value & 79) != 0) sbuf.append("|xl3DAreaStacked100");
      if ((value & 103) != 0) sbuf.append("|xlConeBarStacked");
      if ((value & 80) != 0) sbuf.append("|xlDoughnutExploded");
      if ((value & 102) != 0) sbuf.append("|xlConeBarClustered");
      if ((value & 81) != 0) sbuf.append("|xlRadarMarkers");
      if ((value & 101) != 0) sbuf.append("|xlConeColStacked100");
      if ((value & 82) != 0) sbuf.append("|xlRadarFilled");
      if ((value & 100) != 0) sbuf.append("|xlConeColStacked");
      if ((value & 83) != 0) sbuf.append("|xlSurface");
      if ((value & 107) != 0) sbuf.append("|xlPyramidColStacked");
      if ((value & 84) != 0) sbuf.append("|xlSurfaceWireframe");
      if ((value & 106) != 0) sbuf.append("|xlPyramidColClustered");
      if ((value & 85) != 0) sbuf.append("|xlSurfaceTopView");
      if ((value & 98) != 0) sbuf.append("|xlCylinderCol");
      if ((value & 99) != 0) sbuf.append("|xlConeColClustered");
      if ((value & -4100) != 0) sbuf.append("|xl3DColumn");
      if ((value & -4101) != 0) sbuf.append("|xl3DLine");
      if ((value & -4102) != 0) sbuf.append("|xl3DPie");
      if ((value & 5) != 0) sbuf.append("|xlPie");
      if ((value & -4169) != 0) sbuf.append("|xlXYScatter");
      if ((value & -4098) != 0) sbuf.append("|xl3DArea");
      if ((value & 1) != 0) sbuf.append("|xlArea");
      if ((value & -4120) != 0) sbuf.append("|xlDoughnut");
      if ((value & -4151) != 0) sbuf.append("|xlRadar");
      if ((value & -4152) != 0) sbuf.append("|xlCombo");
      if ((value & 113) != 0) sbuf.append("|xlComboColumnClusteredLine");
      if ((value & 114) != 0) sbuf.append("|xlComboColumnClusteredLineSecondaryAxis");
      if ((value & 115) != 0) sbuf.append("|xlComboAreaStackedColumnClustered");
      if ((value & 116) != 0) sbuf.append("|xlOtherCombinations");
      if ((value & -2) != 0) sbuf.append("|xlSuggestedChart");
      return sbuf.toString();
      }
    }
  }
}
